.. raw:: html

   <!---
   # SPDX-FileCopyrightText: 2020 Efabless Corporation
   #
   # Licensed under the Apache License, Version 2.0 (the "License");
   # you may not use this file except in compliance with the License.
   # You may obtain a copy of the License at
   #
   #      http://www.apache.org/licenses/LICENSE-2.0
   #
   # Unless required by applicable law or agreed to in writing, software
   # distributed under the License is distributed on an "AS IS" BASIS,
   # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   # See the License for the specific language governing permissions and
   # limitations under the License.
   #
   # SPDX-License-Identifier: Apache-2.0
   -->
=====================================
SDF Annotated GL Simulation using CVC
=====================================

Standard Delay Format (SDF) is an IEEE standard for representing and interpreting timing data for use at any stage of an electronic design process.
Typically SDF files are generated by static timing analysis tools and used with simulators for gate-level simulation with timing information.
The SDF file contains the timing information of all the cells in the design. It is used to provide timing information for simulating the gate-level netlist. 
Simulation using timing information is a time-consuming process, and it cannot replace STA. Timing simulation can be helpful to uncover false paths and validate them. 

OpenLane has support for SDF generation (found under ``results/final/sdf/`` folder). To use the generated SDF file in simulation,
you need to update your testbench to add a line similar to the following line (inside any initial block) for each macro in your design.


.. code:: bash
    
    $sdf_annotate("design.sdf", design_instance_name_in_the_tb);
    
Unfortunately, popular open-source Verilog simulators don’t have support for SDF (verilator) or have limited unuseful support (iverilog).
However, a less popular open-source Verilog simulator (`CVC <https://github.com/cambridgehackers/open-src-cvc>`__) has a decent support for timing simulation using SDF files. 
CVC is a proprietary “shared source”:sup:`1,2` commercial open-source simulator, but its license allows using it freely for non-commercial designs.
To run timing simulation using CVC, make sure that use the flags approprate to your usecase, which can be found `here  <https://github.com/cambridgehackers/open-src-cvc/blob/master/doc/cvc_help.txt>`__. We used:

.. code:: bash

    cvc +interp +dump2fst design_gl.v +incdir+PATH_TO_SCL_MODEL_FILES
    
While running the simulation CVC may display messages if timing violations are caught by cell models checkers. An example of such messages is given below:

.. code:: bash

    WARN** now 2050218 ps [566] timing violation in x.y.sky130_fd_sc_hd__dfxtp_1_0_  (diff. 11 ps)
    setup(of setuphold)((posedge D):2050207 ps, (posedge CLK):2050218 ps, 76 ps);
    
Reporting violations during simulation that are not identified by static timing analysis, means you did not constraint the design probably; 
for example, you specified a false path which is not. After identifying and analyzing the violations, you need to re-run your ASIC flow to address the reported violations.

The verilog model files for sky130 libraries contain issues. The corrected files can be found `here  <https://github.com/efabless/caravel_mgmt_soc_litex/tree/main/verilog/cvc-pdk>`__

=======

:sup:`1` The CVC website claims that the product is open source but it uses a custom license3 which is not OSI approved and does not meet either the OSI’s “Open Source Definition” nor the Debian Free Software Guidelines.
 
:sup:`2` The CVC license is derived from Perl’s “Artistic License” ; it adds new terms and clauses.
